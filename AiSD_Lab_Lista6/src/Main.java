import java.util.Comparator;
import java.io.FileWriter;
import java.io.PrintWriter;

import pivot.FirstElementPivotSelector;
import pivot.PivotSelector;
import pivot.RandomPivotSelector;
import core.AbstractSwappingSortingAlgorithm;
import testing.*;
import testing.comparators.*;
import testing.generation.*;
import testing.generation.conversion.*;


public class Main {
    public static void main(String[] args) {

        int[] sizes = {0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 100, 150, 200, 300, 400, 500, 600, 750, 1000};


        Comparator<MarkedValue<Integer>> markedComparator = new MarkedValueComparator<Integer>(new IntegerComparator());

        Generator<MarkedValue<Integer>> orderedGenerator = new MarkingGenerator<Integer>(new OrderedIntegerArrayGenerator());
        Generator<MarkedValue<Integer>> reversedGenerator = new MarkingGenerator<Integer>(new ReversedIntegerArrayGenerator());
        Generator<MarkedValue<Integer>> randomGenerator = new MarkingGenerator<Integer>(new RandomIntegerArrayGenerator(10));
        Generator<MarkedValue<Integer>> shuffledGenerator = new MarkingGenerator<Integer>(new ShuffledIntegerArrayGenerator(10));

        Generator<MarkedValue<Integer>> orderedLLGenerator = new LinkedListGenerator<Integer>(new OrderedIntegerArrayGenerator());
        Generator<MarkedValue<Integer>> reversedLLGenerator = new LinkedListGenerator<Integer>(new ReversedIntegerArrayGenerator());
        Generator<MarkedValue<Integer>> randomLLGenerator = new LinkedListGenerator<Integer>(new RandomIntegerArrayGenerator(10));
        Generator<MarkedValue<Integer>> shuffledLLGenerator = new LinkedListGenerator<Integer>(new ShuffledIntegerArrayGenerator(10));

        /*AbstractSwappingSortingAlgorithm<MarkedValue<Integer>> algorithm = new BubbleSort<>(markedComparator);

        testing.results.swapping.Result result = Tester.runNTimes(algorithm, randomGenerator, 1000, 100);
        printStatistic("time [ms]", result.averageTimeInMilliseconds(), result.timeStandardDeviation());
        printStatistic("comparisons", result.averageComparisons(), result.comparisonsStandardDeviation());
        printStatistic("swaps", result.averageSwaps(), result.swapsStandardDeviation());

        System.out.println("always sorted: " + result.sorted());
        System.out.println("always stable: " + result.stable());*/



        testSort("MergeSort", markedComparator, orderedGenerator, orderedLLGenerator,  sizes, "OrderedGenerator");
        testSort("MergeSort", markedComparator, reversedGenerator, reversedLLGenerator, sizes, "ReversedGenerator");
        testSort("MergeSort", markedComparator, randomGenerator, randomLLGenerator, sizes, "RandomGenerator");
        testSort("MergeSort", markedComparator, shuffledGenerator, shuffledLLGenerator, sizes, "ShuffledGenerator");


        /*testSort("QuickSortFirst", markedComparator, orderedGenerator, orderedLLGenerator,  sizes, "OrderedGenerator");
        testSort("QuickSortFirst", markedComparator, reversedGenerator, reversedLLGenerator, sizes, "ReversedGenerator");
        testSort("QuickSortFirst", markedComparator, randomGenerator, randomLLGenerator, sizes, "RandomGenerator");
        testSort("QuickSortFirst", markedComparator, shuffledGenerator, shuffledLLGenerator, sizes, "ShuffledGenerator");


        testSort("QuickSortRandom", markedComparator, orderedGenerator, orderedLLGenerator,  sizes, "OrderedGenerator");
        testSort("QuickSortRandom", markedComparator, reversedGenerator, reversedLLGenerator, sizes, "ReversedGenerator");
        testSort("QuickSortRandom", markedComparator, randomGenerator, randomLLGenerator, sizes, "RandomGenerator");
        testSort("QuickSortRandom", markedComparator, shuffledGenerator, shuffledLLGenerator, sizes, "ShuffledGenerator");*/


    }

   private static void testSort(String sortType, Comparator<MarkedValue<Integer>> markedComparator, Generator<MarkedValue<Integer>> arrayGenerator, Generator<MarkedValue<Integer>> listGenerator,  int[] sizes, String generatorType) {

        String fileName = sortType + generatorType + ".txt";
        PivotSelector<MarkedValue<Integer>> firstElementPivotSelect = new FirstElementPivotSelector<>();
        PivotSelector<MarkedValue<Integer>> randomPivotSelect = new RandomPivotSelector<>();


        try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {

            writer.println("-- " + sortType + " test; numbers generated by: " + generatorType + " --");
            writer.println("Size\tTime\t\tStddev\t\tCompare\t\tStddev\t\tSwaps\t\tStddev");

            AbstractSwappingSortingAlgorithm<MarkedValue<Integer>> algorithm;
            if (sortType.equals("MergeSort"))
                algorithm = new ModifiedMergeSort<>(markedComparator);
            else if (sortType.equals("QuickSortFirst"))
                algorithm = new QuickSort<>(markedComparator, firstElementPivotSelect);
            else
                algorithm = new QuickSort<>(markedComparator, randomPivotSelect);

            for (int size : sizes) {

                testing.results.swapping.Result result = Tester.runNTimes(algorithm, arrayGenerator, size, 50);
                String formattedOutput = String.format("%5d\t%f\t%f\t%f\t%f\t%f\t%f", size,
                        result.averageTimeInMilliseconds(), result.timeStandardDeviation(),
                        result.averageComparisons(), result.comparisonsStandardDeviation(),
                        result.averageSwaps(), result.swapsStandardDeviation());

                writer.println(formattedOutput.replace('.', ','));

            }

            writer.println("\n---For LinkedLists: ---");
            writer.println("Size\tTime\t\tStddev\t\tCompare\t\tStddev\t\tSwaps\t\tStddev");

            for (int size : sizes) {

                testing.results.swapping.Result result = Tester.runNTimes(algorithm, listGenerator, size, 50);
                String formattedOutput = String.format("%5d\t%f\t%f\t%f\t%f\t%f\t%f", size,
                        result.averageTimeInMilliseconds(), result.timeStandardDeviation(),
                        result.averageComparisons(), result.comparisonsStandardDeviation(),
                        result.averageSwaps(), result.swapsStandardDeviation());

                writer.println(formattedOutput.replace('.', ','));

            }


            System.out.println("Zapisano wyniki do pliku " + fileName);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printStatistic(String label, double average, double stdDev) {
        System.out.println(label + ": " + double2String(average) + " +- " + double2String(stdDev));
    }

    private static String double2String(double value) {
        return String.format("%.12f", value);
    }

}